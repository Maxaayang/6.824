package mr

import (
	"fmt"
	"hash/fnv"
	"io/ioutil"
	"log"
	"net/rpc"
	// "plugin"
	"os"
	"time"
	"sort"
	"strconv"
	"unicode"
	"strings"
	"encoding/json"
)

//
// Map functions return a slice of KeyValue.
//
type KeyValue struct {
	Key   string
	Value string
}

// for sorting by key.
type ByKey []KeyValue

// for sorting by key.
func (a ByKey) Len() int           { return len(a) }
func (a ByKey) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByKey) Less(i, j int) bool { return a[i].Key < a[j].Key }

//
// use ihash(key) % NReduce to choose the reduce
// task number for each KeyValue emitted by Map.
//
func ihash(key string) int {
	h := fnv.New32a()
	h.Write([]byte(key))
	return int(h.Sum32() & 0x7fffffff)
}

//
// main/mrworker.go calls this function.
//
func Worker(mapf func(string, string) []KeyValue,
	reducef func(string, []string) string) {

	// Your worker implementation here.

	// uncomment to send the Example RPC to the coordinator.
	// CallExample()

	for {
		var reqmap ReqMap
		var resmap ResMap
		findUndoMapFile(&reqmap, &resmap)
		if (!resmap.remain) {
			break
		}
		if (resmap.filename == "") {
			time.Sleep(time.Second)
			continue
		}
		runMap(&reqmap, &resmap)

	}


	for {
		var reqreduce ReqReduce
		var resreduce ResReduce
		findUndoReduceFile(&reqreduce, &resreduce)
		if (!resreduce.remain) {
			break;
		}
		runReduce(&reqreduce, &resreduce)
	}


}

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func Ma(filename string, contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Re(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}

func saveMap(kva []KeyValue, nReduce int) bool {
	enc := json.NewEncoder(file)
	for i := 0; i < nReduce; i++ {
		filename := reduceName()
	}
	return true
}

func saveRe() {}

func findUndoMapFile(reqmap *ReqMap, resmap *ResMap) {
	call("Coordinator.GetUndoneMapFile", reqmap, &resmap)
}

func runMap(reqmap *ReqMap, resmap *ResMap) {
	file, err := os.Open(resmap.filename)
	if err != nil {
		log.Fatalf("cannot open %v", resmap.filename)
	}
	content, err := ioutil.ReadAll(file)
	if err != nil {
		log.Fatalf("cannot read %v", resmap.filename)
	}
	file.Close()
	// kva := []KeyValue{}
	kva := Ma(resmap.filename, string(content))
	sort.Sort(ByKey(kva))
	saveMap(kva, resmap.nReduce)

	resmap.done = true
	call("Coordinator.MapDone", reqmap, &resmap)
}

func findUndoReduceFile(reqreduce *ReqReduce, resreduce *ResReduce) {
	call("Coordinator.GetUndoneReduceFile", reqreduce, &resreduce)
}

func runReduce(reqreduce *ReqReduce, resreduce *ResReduce) {}

//
// example function to show how to make an RPC call to the coordinator.
//
// the RPC argument and reply types are defined in rpc.go.
//
func CallExample() {

	// declare an argument structure.
	args := ExampleArgs{}

	// fill in the argument(s).
	args.X = 99

	// declare a reply structure.
	reply := ExampleReply{}

	// send the RPC request, wait for the reply.
	// the "Coordinator.Example" tells the
	// receiving server that we'd like to call
	// the Example() method of struct Coordinator.
	ok := call("Coordinator.Example", &args, &reply)
	if ok {
		// reply.Y should be 100.
		fmt.Printf("reply.Y %v\n", reply.Y)
	} else {
		fmt.Printf("call failed!\n")
	}
}

//
// send an RPC request to the coordinator, wait for the response.
// usually returns true.
// returns false if something goes wrong.
//
func call(rpcname string, args interface{}, reply interface{}) bool {
	// c, err := rpc.DialHTTP("tcp", "127.0.0.1"+":1234")
	sockname := coordinatorSock()
	c, err := rpc.DialHTTP("unix", sockname)
	if err != nil {
		log.Fatal("dialing:", err)
	}
	defer c.Close() // 延迟语句的执行顺序

	err = c.Call(rpcname, args, reply)
	if err == nil {
		return true
	}

	fmt.Println(err)
	return false
}
